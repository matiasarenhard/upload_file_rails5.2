continue
params[:file]
continue
aux[1]
aux[0]
i.inspect
continue
i.inspect
continue
i.inspect
i
continue
line.split(/\t/)
continue
aux.shift
aux.shift.split(/\t/)
aux.shift
aux.split(/\t/)
aux.split( /, */ )
aux.split('\n')
aux.split(']n')
aux.split(/\W+/)
aux.split('\\\')
aux.split('\\')
aux.split('\')
aux.to_s.split('\')
aux.to_s.split('-')
aux.to_s.split('-')\
aux.to_s.split('-')[1]
aux.split[1]
aux.split
aux.spli
i.inspect
i
aux
a.inspect
a
a = i.split('\\')
i.split('\\')
i.split('')
i.split('\')
continue
i.split('\')
aux.split("\")
a = aux.split("\").map(&:to_s)
a = aux.split("\").map(%:to_s)
a = aux.split("\").map {|s| s.to_s}
a = aux.split("\").map { |s| s}
a = aux.split(",").map { |s| s}
a
a = aux.split("\t").map { |s| s}
aux.split("\t").map { |s| s}
aux
aux[0]
aux.first
aux.split('\\')
aux.split(\\)
aux.split(//)
aux
i.inspect
i
continue
aux
aix
continue
index
aux
continue
aux.each
aux[0]
aux = line.split('\t')
line.split('\t')
continue
line.split('\t')
line.split('/   /')
line.split('   ')
line.split(' ')
aux
continue
index
aux
continue
line.split(' ')
line
continue
conitnue
continue
params[:file]
params[:example][:file]
params
continue
index
line
line.2
continue
line
continue
index
line
continue
params[:example][:file].to_io
params[:example][:file].to_s
params[:example][:file].headers
params[:example][:file].content_type
params[:example][:file].read
continue
rows = params[:example][:file].split(/\n/)
File.open(uploaded_io)
uploaded_io.inspect
uploaded_io
uploaded_io.open
continue
uploaded_io.open
params[:example][:file][:headers]
uploaded_io[:headers]
uploaded_io
continue
params[:example][:file]
params[:file]
params
@example
